# SmartHire - Diagram architektury technicznej

## Warstwy aplikacji:

### 1. Warstwa prezentacji (UI)
- **Lightning Web Components (LWC)**
  - cvAnalyzer - komponent do analizy CV
  - candidateConversion - komponent do konwersji kandydatów
  - parentComponent - komponent nadrzędny
  - messageBanner - komponent do wyświetlania powiadomień

### 2. Warstwa kontrolerów
- **Apex Controllers**
  - ApplicationController - zarządzanie aplikacjami
  - CandidateController - zarządzanie kandydatami
  - CVAnalysisController - kontroler analizy CV
  - PositionController - zarządzanie stanowiskami
  - CandidateConversionController - kontroler konwersji kandydatów

### 3. Warstwa serwisów
- **Service Classes**
  - CVAnalysisService - serwis analizy CV
  - CandidateService - serwis zarządzania kandydatami
  - OpenAIService - serwis integracji z OpenAI
  - JobApplicationService - serwis zarządzania aplikacjami
  - PositionService - serwis zarządzania stanowiskami
  - CandidateConversionService - serwis konwersji kandydatów
  - ResumeAnalysisService - serwis analizy CV

### 4. Warstwa pomocnicza
- **Helper Classes**
  - CVAnalysisHelper - klasa pomocnicza do analizy CV
  - CVAnalysisFactory - fabryka analizatorów CV
  - SecurityUtils - narzędzia bezpieczeństwa
  - Logger - system logowania
  - SmartHireConfig - konfiguracja aplikacji

### 5. Warstwa asynchroniczna
- **Asynchronous Processing**
  - ResumeAnalysisQueueable - asynchroniczna analiza CV

### 6. Warstwa danych
- **Data Access**
  - SOQL Queries - zapytania do bazy danych
  - DML Operations - operacje modyfikacji danych

### 7. Warstwa integracji
- **External Integrations**
  - OpenAI API - integracja z AI
  - Document Storage Systems - systemy przechowywania dokumentów

## Przepływ danych:

1. Użytkownik wchodzi w interakcję z komponentem LWC
2. Komponent LWC wywołuje metodę kontrolera Apex
3. Kontroler deleguje logikę biznesową do odpowiedniego serwisu
4. Serwis wykonuje operacje na danych lub wywołuje inne serwisy
5. W przypadku analizy CV, zadanie jest przekazywane do kolejki asynchronicznej
6. ResumeAnalysisQueueable wywołuje OpenAIService do analizy CV
7. Wyniki analizy są zapisywane w bazie danych
8. Użytkownik jest powiadamiany o zakończeniu analizy

## Obiekty danych i relacje:

- **Job_Application__c**
  - Candidate__c (lookup)
  - Position__c (lookup)
  - Status__c (picklist)
  - Resume__c (text)
  - Cover_Letter__c (text)
  - Application_Date__c (date)
  - Assigned_Reviewer__c (lookup to User)
  - Notes__c (text area)
  - Analysis_Results__c (long text area)
  - Analysis_Score__c (number)
  - Skills_Identified__c (text)
  - Analysis_Date__c (datetime)

- **Position__c**
  - Title__c (text)
  - Description__c (text area)
  - Required_Skills__c (text)
  - Department__c (text)
  - Status__c (picklist)
  - Hiring_Manager__c (lookup to User)

- **Candidate__c**
  - First_Name__c (text)
  - Last_Name__c (text)
  - Email__c (email)
  - Phone__c (phone)
  - Skills__c (text)
  - Experience__c (number)
  - Education__c (text)
  - Contact__c (lookup to Contact)
  - Analysis_Results__c (long text area)
  - Last_Analysis_Date__c (datetime)

- **Skill__c**
  - Name (text)
  - Category__c (picklist)
  - Description__c (text)

## Mechanizmy bezpieczeństwa:

- SecurityUtils do walidacji dostępu do rekordów
- Sanityzacja danych wejściowych
- Ochrona przed SOQL Injection
- Zarządzanie uprawnieniami użytkowników

## Obsługa błędów i logowanie:

- Logger do rejestrowania zdarzeń i błędów
- Różne poziomy logowania (DEBUG, INFO, ERROR)
- Mechanizmy powiadamiania o błędach 

## Architektura techniczna SmartHire

### Warstwy aplikacji

1. **Warstwa prezentacji**
   - Lightning Web Components (LWC)
   - Lightning App Pages
   - Lightning Record Pages

2. **Warstwa kontrolerów**
   - PositionController - zarządzanie stanowiskami
   - CandidateController - zarządzanie kandydatami
   - ApplicationController - zarządzanie aplikacjami
   - CVAnalysisController - analiza CV
   - CandidateConversionController - konwersja kandydatów

3. **Warstwa serwisów**
   - PositionService - logika biznesowa dla stanowisk
   - CandidateService - logika biznesowa dla kandydatów
   - JobApplicationService - logika biznesowa dla aplikacji
   - CVAnalysisService - logika analizy CV
   - OpenAIService - integracja z OpenAI
   - CandidateConversionService - logika konwersji kandydatów

4. **Warstwa dostępu do danych**
   - Standardowe operacje SOQL/DML
   - Selektory (przyszły rozwój)

5. **Warstwa integracji**
   - OpenAI API
   - PDF Parser Service
   - DOCX Parser Service

### Wzorce projektowe

1. **Service Layer Pattern** - Separacja logiki biznesowej od kontrolerów
2. **Factory Pattern** - Tworzenie obiektów analizy CV
3. **Singleton Pattern** - Konfiguracja aplikacji
4. **Dependency Injection** - Wstrzykiwanie zależności do serwisów

### Obiekty niestandardowe

- **Position__c** - Stanowiska rekrutacyjne
- **Candidate__c** - Kandydaci
- **Job_Application__c** - Aplikacje kandydatów
- **Skill__c** - Umiejętności
- **Error_Log__c** - Logi błędów
- **SmartHire_Setting__mdt** - Metadane konfiguracyjne

### Integracje

1. **OpenAI API**
   - Analiza CV
   - Dopasowanie kandydatów do stanowisk
   - Generowanie rekomendacji

2. **Usługi parsowania dokumentów**
   - Parsowanie PDF
   - Parsowanie DOCX/DOC

### Zabezpieczenia

1. **Kontrola dostępu**
   - Klasa SecurityUtils do centralnego zarządzania uprawnieniami
   - Sprawdzanie uprawnień do obiektów i pól przed każdą operacją

2. **Bezpieczne wywołania API**
   - Named Credentials do bezpiecznego przechowywania kluczy API
   - Walidacja danych wejściowych

### Obsługa błędów

1. **Centralne logowanie**
   - Klasa Logger do spójnego logowania błędów
   - Zapisywanie błędów w obiekcie Error_Log__c

2. **Obsługa wyjątków**
   - Szczegółowe komunikaty błędów
   - Odpowiednie propagowanie wyjątków

### Wydajność

1. **Optymalizacja zapytań**
   - Minimalizacja liczby zapytań SOQL
   - Bulkifikacja operacji DML

2. **Cachowanie**
   - Cachowanie wyników analizy CV
   - Wykorzystanie Platform Cache 